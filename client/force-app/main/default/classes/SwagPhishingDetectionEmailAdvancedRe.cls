/*
 * phishingapi
 * Easily and directly scan and block phishing security threats in input.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Result of detecting phishing using AI
 */
public class SwagPhishingDetectionEmailAdvancedRe implements Swagger.MappedProperties {
    /**
     * True if the result is not phishing (clean), and false otherwise
     * @return cleanResult
     */
    public Boolean cleanResult { get; set; }

    /**
     * Overall phishing risk level between 0.0 and 1.0
     * @return phishingRiskLevel
     */
    public Double phishingRiskLevel { get; set; }

    /**
     * Overall phishing spam level between 0.0 and 1.0
     * @return spamRiskLevel
     */
    public Double spamRiskLevel { get; set; }

    /**
     * True if the input email is from a low reputation sender
     * @return containsLowReputationSender
     */
    public Boolean containsLowReputationSender { get; set; }

    /**
     * True if the input email contains phishing threat risks, false otherwise
     * @return containsPhishing
     */
    public Boolean containsPhishing { get; set; }

    /**
     * True if the email contains phishing threat risks, false otherwise
     * @return containsSpam
     */
    public Boolean containsSpam { get; set; }

    /**
     * True if the input email contains unsolicited sales, false otherwise
     * @return containsUnsolicitedSales
     */
    public Boolean containsUnsolicitedSales { get; set; }

    /**
     * True if the input email contains promotional content, false otherwise
     * @return containsPromotionalContent
     */
    public Boolean containsPromotionalContent { get; set; }

    /**
     * True if the input email contains a phishing attempt, false otherwise
     * @return containsPhishingAttempt
     */
    public Boolean containsPhishingAttempt { get; set; }

    /**
     * Rationale for why the conclusion was formed
     * @return analysisRationale
     */
    public String analysisRationale { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'CleanResult' => 'cleanResult',
        'PhishingRiskLevel' => 'phishingRiskLevel',
        'SpamRiskLevel' => 'spamRiskLevel',
        'ContainsLowReputationSender' => 'containsLowReputationSender',
        'ContainsPhishing' => 'containsPhishing',
        'ContainsSpam' => 'containsSpam',
        'ContainsUnsolicitedSales' => 'containsUnsolicitedSales',
        'ContainsPromotionalContent' => 'containsPromotionalContent',
        'ContainsPhishingAttempt' => 'containsPhishingAttempt',
        'AnalysisRationale' => 'analysisRationale'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static SwagPhishingDetectionEmailAdvancedRe getExample() {
        SwagPhishingDetectionEmailAdvancedRe phishingDetectionEmailAdvancedResponse = new SwagPhishingDetectionEmailAdvancedRe();
        phishingDetectionEmailAdvancedResponse.cleanResult = true;
        phishingDetectionEmailAdvancedResponse.phishingRiskLevel = 1.3579;
        phishingDetectionEmailAdvancedResponse.spamRiskLevel = 1.3579;
        phishingDetectionEmailAdvancedResponse.containsLowReputationSender = true;
        phishingDetectionEmailAdvancedResponse.containsPhishing = true;
        phishingDetectionEmailAdvancedResponse.containsSpam = true;
        phishingDetectionEmailAdvancedResponse.containsUnsolicitedSales = true;
        phishingDetectionEmailAdvancedResponse.containsPromotionalContent = true;
        phishingDetectionEmailAdvancedResponse.containsPhishingAttempt = true;
        phishingDetectionEmailAdvancedResponse.analysisRationale = 'aeiou';
        return phishingDetectionEmailAdvancedResponse;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagPhishingDetectionEmailAdvancedRe) {
            SwagPhishingDetectionEmailAdvancedRe phishingDetectionEmailAdvancedResponse = (SwagPhishingDetectionEmailAdvancedRe) obj;
            return this.cleanResult == phishingDetectionEmailAdvancedResponse.cleanResult
                && this.phishingRiskLevel == phishingDetectionEmailAdvancedResponse.phishingRiskLevel
                && this.spamRiskLevel == phishingDetectionEmailAdvancedResponse.spamRiskLevel
                && this.containsLowReputationSender == phishingDetectionEmailAdvancedResponse.containsLowReputationSender
                && this.containsPhishing == phishingDetectionEmailAdvancedResponse.containsPhishing
                && this.containsSpam == phishingDetectionEmailAdvancedResponse.containsSpam
                && this.containsUnsolicitedSales == phishingDetectionEmailAdvancedResponse.containsUnsolicitedSales
                && this.containsPromotionalContent == phishingDetectionEmailAdvancedResponse.containsPromotionalContent
                && this.containsPhishingAttempt == phishingDetectionEmailAdvancedResponse.containsPhishingAttempt
                && this.analysisRationale == phishingDetectionEmailAdvancedResponse.analysisRationale;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (cleanResult == null ? 0 : System.hashCode(cleanResult));
        hashCode = (17 * hashCode) + (phishingRiskLevel == null ? 0 : System.hashCode(phishingRiskLevel));
        hashCode = (17 * hashCode) + (spamRiskLevel == null ? 0 : System.hashCode(spamRiskLevel));
        hashCode = (17 * hashCode) + (containsLowReputationSender == null ? 0 : System.hashCode(containsLowReputationSender));
        hashCode = (17 * hashCode) + (containsPhishing == null ? 0 : System.hashCode(containsPhishing));
        hashCode = (17 * hashCode) + (containsSpam == null ? 0 : System.hashCode(containsSpam));
        hashCode = (17 * hashCode) + (containsUnsolicitedSales == null ? 0 : System.hashCode(containsUnsolicitedSales));
        hashCode = (17 * hashCode) + (containsPromotionalContent == null ? 0 : System.hashCode(containsPromotionalContent));
        hashCode = (17 * hashCode) + (containsPhishingAttempt == null ? 0 : System.hashCode(containsPhishingAttempt));
        hashCode = (17 * hashCode) + (analysisRationale == null ? 0 : System.hashCode(analysisRationale));
        return hashCode;
    }
}

