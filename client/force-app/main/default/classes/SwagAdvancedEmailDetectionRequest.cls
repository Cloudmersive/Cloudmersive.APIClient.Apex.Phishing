/*
 * phishingapi
 * Easily and directly scan and block phishing security threats in input.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Request to detect phishing from an email
 */
public class SwagAdvancedEmailDetectionRequest implements Swagger.MappedProperties {
    /**
     * Email address of the sender
     * @return fromEmailAddress
     */
    public String fromEmailAddress { get; set; }

    /**
     * Email address of the recipient
     * @return toEmailAddress
     */
    public String toEmailAddress { get; set; }

    /**
     * Subject of the email
     * @return subject
     */
    public String subject { get; set; }

    /**
     * Body of the email in HTML, or text
     * @return htmlBody
     */
    public String htmlBody { get; set; }

    /**
     * Allow email from low reputation senders and domains
     * @return allowLowReputationSenders
     */
    public Boolean allowLowReputationSenders { get; set; }

    /**
     * True to allow sanctioned countries and certain known sanctioned entities, false otherwise (default)
     * @return allowSanctioned
     */
    public Boolean allowSanctioned { get; set; }

    /**
     * Get inputEmailFile
     * @return inputEmailFile
     */
    public Blob inputEmailFile { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'FromEmailAddress' => 'fromEmailAddress',
        'ToEmailAddress' => 'toEmailAddress',
        'Subject' => 'subject',
        'HtmlBody' => 'htmlBody',
        'AllowLowReputationSenders' => 'allowLowReputationSenders',
        'AllowSanctioned' => 'allowSanctioned',
        'InputEmailFile' => 'inputEmailFile'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static SwagAdvancedEmailDetectionRequest getExample() {
        SwagAdvancedEmailDetectionRequest advancedEmailDetectionRequest = new SwagAdvancedEmailDetectionRequest();
        advancedEmailDetectionRequest.fromEmailAddress = 'aeiou';
        advancedEmailDetectionRequest.toEmailAddress = 'aeiou';
        advancedEmailDetectionRequest.subject = 'aeiou';
        advancedEmailDetectionRequest.htmlBody = 'aeiou';
        advancedEmailDetectionRequest.allowLowReputationSenders = true;
        advancedEmailDetectionRequest.allowSanctioned = true;
        advancedEmailDetectionRequest.inputEmailFile = EncodingUtil.base64Decode('VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2cu');
        return advancedEmailDetectionRequest;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagAdvancedEmailDetectionRequest) {
            SwagAdvancedEmailDetectionRequest advancedEmailDetectionRequest = (SwagAdvancedEmailDetectionRequest) obj;
            return this.fromEmailAddress == advancedEmailDetectionRequest.fromEmailAddress
                && this.toEmailAddress == advancedEmailDetectionRequest.toEmailAddress
                && this.subject == advancedEmailDetectionRequest.subject
                && this.htmlBody == advancedEmailDetectionRequest.htmlBody
                && this.allowLowReputationSenders == advancedEmailDetectionRequest.allowLowReputationSenders
                && this.allowSanctioned == advancedEmailDetectionRequest.allowSanctioned
                && this.inputEmailFile == advancedEmailDetectionRequest.inputEmailFile;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (fromEmailAddress == null ? 0 : System.hashCode(fromEmailAddress));
        hashCode = (17 * hashCode) + (toEmailAddress == null ? 0 : System.hashCode(toEmailAddress));
        hashCode = (17 * hashCode) + (subject == null ? 0 : System.hashCode(subject));
        hashCode = (17 * hashCode) + (htmlBody == null ? 0 : System.hashCode(htmlBody));
        hashCode = (17 * hashCode) + (allowLowReputationSenders == null ? 0 : System.hashCode(allowLowReputationSenders));
        hashCode = (17 * hashCode) + (allowSanctioned == null ? 0 : System.hashCode(allowSanctioned));
        hashCode = (17 * hashCode) + (inputEmailFile == null ? 0 : System.hashCode(inputEmailFile));
        return hashCode;
    }
}

