/*
 * phishingapi
 * Easily and directly scan and block phishing security threats in input.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * AI advanced phishing detection request
 */
public class SwagPhishingDetectionAdvancedRequest implements Swagger.MappedProperties {
    /**
     * Input text string to detect phishing against
     * @return inputString
     */
    public String inputString { get; set; }

    /**
     * Optional: Specify which AI model to use.  Possible choices are Normal and Advanced.  Default is Advanced.
     * @return model
     */
    public String model { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'InputString' => 'inputString',
        'Model' => 'model'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static SwagPhishingDetectionAdvancedRequest getExample() {
        SwagPhishingDetectionAdvancedRequest phishingDetectionAdvancedRequest = new SwagPhishingDetectionAdvancedRequest();
        phishingDetectionAdvancedRequest.inputString = 'aeiou';
        phishingDetectionAdvancedRequest.model = 'aeiou';
        return phishingDetectionAdvancedRequest;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagPhishingDetectionAdvancedRequest) {
            SwagPhishingDetectionAdvancedRequest phishingDetectionAdvancedRequest = (SwagPhishingDetectionAdvancedRequest) obj;
            return this.inputString == phishingDetectionAdvancedRequest.inputString
                && this.model == phishingDetectionAdvancedRequest.model;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (inputString == null ? 0 : System.hashCode(inputString));
        hashCode = (17 * hashCode) + (model == null ? 0 : System.hashCode(model));
        return hashCode;
    }
}

