/*
 * phishingapi
 * Easily and directly scan and block phishing security threats in input.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Result of detecting phishing using AI
 */
public class SwagPhishingDetectionAdvancedRespons implements Swagger.MappedProperties {
    /**
     * True if the result is not phishing (clean), and false otherwise
     * @return cleanResult
     */
    public Boolean cleanResult { get; set; }

    /**
     * Overall phishing risk level between 0.0 and 1.0
     * @return phishingRiskLevel
     */
    public Double phishingRiskLevel { get; set; }

    /**
     * Rationale for why the conclusion was formed
     * @return analysisRationale
     */
    public String analysisRationale { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'CleanResult' => 'cleanResult',
        'PhishingRiskLevel' => 'phishingRiskLevel',
        'AnalysisRationale' => 'analysisRationale'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static SwagPhishingDetectionAdvancedRespons getExample() {
        SwagPhishingDetectionAdvancedRespons phishingDetectionAdvancedResponse = new SwagPhishingDetectionAdvancedRespons();
        phishingDetectionAdvancedResponse.cleanResult = true;
        phishingDetectionAdvancedResponse.phishingRiskLevel = 1.3579;
        phishingDetectionAdvancedResponse.analysisRationale = 'aeiou';
        return phishingDetectionAdvancedResponse;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagPhishingDetectionAdvancedRespons) {
            SwagPhishingDetectionAdvancedRespons phishingDetectionAdvancedResponse = (SwagPhishingDetectionAdvancedRespons) obj;
            return this.cleanResult == phishingDetectionAdvancedResponse.cleanResult
                && this.phishingRiskLevel == phishingDetectionAdvancedResponse.phishingRiskLevel
                && this.analysisRationale == phishingDetectionAdvancedResponse.analysisRationale;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (cleanResult == null ? 0 : System.hashCode(cleanResult));
        hashCode = (17 * hashCode) + (phishingRiskLevel == null ? 0 : System.hashCode(phishingRiskLevel));
        hashCode = (17 * hashCode) + (analysisRationale == null ? 0 : System.hashCode(analysisRationale));
        return hashCode;
    }
}

